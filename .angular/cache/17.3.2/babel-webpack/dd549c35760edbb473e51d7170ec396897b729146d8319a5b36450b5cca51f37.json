{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@app/_services/employee.service\";\nimport * as i3 from \"@app/_services/department.service\";\nimport * as i4 from \"@app/_services/alert.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"is-invalid\": a0\n});\nfunction TransferModalComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const department_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", department_r1.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", department_r1.name, \" \");\n  }\n}\nfunction TransferModalComponent_div_21_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Department is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransferModalComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, TransferModalComponent_div_21_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.departmentId.errors.required);\n  }\n}\nfunction TransferModalComponent_span_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 19);\n  }\n}\nexport let TransferModalComponent = /*#__PURE__*/(() => {\n  class TransferModalComponent {\n    constructor(formBuilder, employeeService, departmentService, alertService) {\n      this.formBuilder = formBuilder;\n      this.employeeService = employeeService;\n      this.departmentService = departmentService;\n      this.alertService = alertService;\n      this.close = new EventEmitter();\n      this.transferComplete = new EventEmitter();\n      this.loading = false;\n      this.submitted = false;\n      this.departments = [];\n    }\n    ngOnInit() {\n      if (!this.employee || !this.employee.id) {\n        console.error('Invalid employee data:', this.employee);\n        this.alertService.error('Employee data is missing');\n        this.close.emit();\n        return;\n      }\n      this.form = this.formBuilder.group({\n        departmentId: [this.employee.departmentId || '', Validators.required]\n      });\n      // Load departments\n      this.departmentService.getAll().pipe(first()).subscribe({\n        next: departments => {\n          if (!departments || departments.length === 0) {\n            this.alertService.error('No departments available');\n            return;\n          }\n          this.departments = departments;\n        },\n        error: error => {\n          console.error('Error loading departments:', error);\n          this.alertService.error('Error loading departments');\n        }\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      // reset alerts on submit\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      if (!this.employee || !this.employee.id) {\n        console.error('Invalid employee data:', this.employee);\n        this.alertService.error('Employee data is missing');\n        return;\n      }\n      const newDepartmentId = this.f.departmentId.value;\n      if (!newDepartmentId) {\n        this.alertService.error('Please select a department');\n        return;\n      }\n      // Don't proceed if the department hasn't changed\n      if (newDepartmentId === this.employee.departmentId) {\n        this.alertService.error('Employee is already in this department');\n        return;\n      }\n      this.loading = true;\n      this.employeeService.transferDepartment(this.employee.id, newDepartmentId).pipe(first(), switchMap(response => {\n        console.log('Transfer successful:', response);\n        return this.employeeService.getById(this.employee.id);\n      })).subscribe({\n        next: updatedEmployee => {\n          console.log('Updated employee data:', updatedEmployee);\n          this.alertService.success('Employee transferred successfully');\n          this.transferComplete.emit();\n          this.close.emit();\n        },\n        error: error => {\n          console.error('Transfer error:', error);\n          this.alertService.error(error?.message || 'Error transferring employee');\n          this.loading = false;\n        }\n      });\n    }\n    onClose() {\n      this.close.emit();\n    }\n    static #_ = this.ɵfac = function TransferModalComponent_Factory(t) {\n      return new (t || TransferModalComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EmployeeService), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i4.AlertService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TransferModalComponent,\n      selectors: [[\"app-transfer-modal\"]],\n      inputs: {\n        employee: \"employee\"\n      },\n      outputs: {\n        close: \"close\",\n        transferComplete: \"transferComplete\"\n      },\n      decls: 28,\n      vars: 11,\n      consts: [[1, \"modal-backdrop\", 3, \"click\"], [1, \"modal-content\", 3, \"click\"], [1, \"modal-header\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"modal-body\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [1, \"form-control-static\"], [\"for\", \"departmentId\"], [\"formControlName\", \"departmentId\", 1, \"form-control\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-link\", 3, \"click\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n      template: function TransferModalComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_div_click_0_listener() {\n            return ctx.onClose();\n          });\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_div_click_1_listener($event) {\n            return $event.stopPropagation();\n          });\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"h3\");\n          i0.ɵɵtext(4, \"Transfer Employee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_button_click_5_listener() {\n            return ctx.onClose();\n          });\n          i0.ɵɵtext(6, \"\\u00D7\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 4)(8, \"form\", 5);\n          i0.ɵɵlistener(\"ngSubmit\", function TransferModalComponent_Template_form_ngSubmit_8_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"label\");\n          i0.ɵɵtext(11, \"Employee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"p\", 7);\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 8);\n          i0.ɵɵtext(16, \"New Department\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"select\", 9)(18, \"option\", 10);\n          i0.ɵɵtext(19, \"Select Department\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(20, TransferModalComponent_option_20_Template, 2, 2, \"option\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(21, TransferModalComponent_div_21_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 6)(23, \"button\", 13);\n          i0.ɵɵtemplate(24, TransferModalComponent_span_24_Template, 1, 0, \"span\", 14);\n          i0.ɵɵtext(25, \" Transfer Employee \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_button_click_26_listener() {\n            return ctx.onClose();\n          });\n          i0.ɵɵtext(27, \"Cancel\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate3(\" \", ctx.employee.employeeId, \" - \", ctx.employee.account == null ? null : ctx.employee.account.firstName, \" \", ctx.employee.account == null ? null : ctx.employee.account.lastName, \" \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.departmentId.errors));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.departmentId.errors);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      encapsulation: 2\n    });\n  }\n  return TransferModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}