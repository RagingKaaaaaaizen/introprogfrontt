{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorkflowService = /*#__PURE__*/(() => {\n  class WorkflowService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = `${environment.apiUrl}/api/workflows`;\n    }\n    getAll() {\n      return this.http.get(this.baseUrl).pipe(map(response => this.mapWorkflows(response)));\n    }\n    getByEmployeeId(employeeId) {\n      return this.http.get(`${this.baseUrl}/employee/${employeeId}`).pipe(map(response => this.mapWorkflows(response)));\n    }\n    getById(id) {\n      return this.http.get(`${this.baseUrl}/${id}`).pipe(map(response => this.mapWorkflow(response)));\n    }\n    create(params) {\n      return this.http.post(this.baseUrl, params).pipe(map(response => this.mapWorkflow(response)));\n    }\n    update(id, params) {\n      return this.http.put(`${this.baseUrl}/${id}`, params).pipe(map(response => this.mapWorkflow(response)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.baseUrl}/${id}`);\n    }\n    // Helper methods to ensure consistent data structure\n    mapWorkflows(workflows) {\n      return workflows.map(w => this.mapWorkflow(w));\n    }\n    mapWorkflow(workflow) {\n      return {\n        id: workflow.id?.toString(),\n        type: workflow.type,\n        details: workflow.details,\n        status: workflow.status,\n        employeeId: workflow.employeeId?.toString(),\n        dateCreated: workflow.dateCreated,\n        dateUpdated: workflow.dateUpdated,\n        employee: workflow.employee,\n        comments: workflow.comments?.map(c => ({\n          id: c.id?.toString(),\n          workflowId: c.workflowId?.toString(),\n          userId: c.userId?.toString(),\n          userName: c.userName,\n          comment: c.comment,\n          dateCreated: c.dateCreated\n        })),\n        attachments: workflow.attachments?.map(a => ({\n          id: a.id?.toString(),\n          workflowId: a.workflowId?.toString(),\n          fileName: a.fileName,\n          fileType: a.fileType,\n          fileSize: a.fileSize,\n          uploadDate: a.uploadDate,\n          uploadedBy: a.uploadedBy\n        })),\n        approverId: workflow.approverId?.toString(),\n        approverName: workflow.approverName,\n        approvalDate: workflow.approvalDate,\n        rejectionReason: workflow.rejectionReason\n      };\n    }\n    static #_ = this.ɵfac = function WorkflowService_Factory(t) {\n      return new (t || WorkflowService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WorkflowService,\n      factory: WorkflowService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WorkflowService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}