{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { map, catchError, switchMap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./alert.service\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http, alertService) {\n      this.http = http;\n      this.alertService = alertService;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    handleError(error) {\n      this.alertService.error('An error occurred', {\n        autoClose: false\n      });\n      return throwError('An error occurred');\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    create(params) {\n      return this.http.post(baseUrl, params).pipe(map(employee => {\n        this.employeeSubject.next(employee);\n        this.alertService.success('Employee created successfully', {\n          autoClose: false\n        });\n        return employee;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`).pipe(catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(employee => {\n        this.employeeSubject.next(employee);\n        this.alertService.success('Employee updated successfully', {\n          autoClose: false\n        });\n        return employee;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(() => {\n        this.alertService.success('Employee deleted successfully', {\n          autoClose: false\n        });\n        return true;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n    transferDepartment(employeeId, newDepartmentId) {\n      // First get the current employee data\n      return this.getById(employeeId).pipe(switchMap(currentEmployee => {\n        // Create update data with current employee data plus new department\n        const updateData = {\n          ...currentEmployee,\n          departmentId: newDepartmentId\n        };\n        // Use PUT to update the employee\n        return this.update(employeeId, updateData);\n      }));\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}